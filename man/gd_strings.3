.\" header.tmac.  GetData manual macros.
.\"
.\" Copyright (C) 2016 D. V. Wiebe
.\"
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\"
.\" This file is part of the GetData project.
.\"
.\" Permission is granted to copy, distribute and/or modify this document
.\" under the terms of the GNU Free Documentation License, Version 1.2 or
.\" any later version published by the Free Software Foundation; with no
.\" Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
.\" Texts.  A copy of the license is included in the `COPYING.DOC' file
.\" as part of this distribution.

.\" Format a function name with optional trailer: func_name()trailer
.de FN \" func_name [trailer]
.nh
.BR \\$1 ()\\$2
.hy
..

.\" Format a reference to section 3 of the manual: name(3)trailer
.de F3 \" func_name [trailer]
.nh
.BR \\$1 (3)\\$2
.hy
..

.\" Format the header of a list of definitons
.de DD \" name alt...
.ie "\\$2"" \{ \
.TP 8
.PD
.B \\$1 \}
.el \{ \
.PP
.B \\$1
.PD 0
.DD \\$2 \\$3 \}
..

.\" Start a code block: Note: groff defines an undocumented .SC for
.\" Bell Labs man legacy reasons.
.de SC
.fam C
.na
.nh
..

.\" End a code block
.de EC
.hy
.ad
.fam
..

.\" Format a structure pointer member: struct->member\fRtrailer
.de SPM \" struct member trailer
.nh
.ie "\\$3"" .IB \\$1 ->\: \\$2
.el .IB \\$1 ->\: \\$2\fR\\$3
.hy
..

.\" Format a function argument
.de ARG \" name trailer
.nh
.ie "\\$2"" .I \\$1
.el .IR \\$1 \\$2
.hy
..

.\" Hyphenation exceptions
.hw sarray carray lincom linterp
.\" gd_strings.3.  The gd_strings man page.
.\"
.\" Copyright (C) 2008, 2010, 2011, 2016 D.V. Wiebe
.\"
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\"
.\" This file is part of the GetData project.
.\"
.\" Permission is granted to copy, distribute and/or modify this document
.\" under the terms of the GNU Free Documentation License, Version 1.2 or
.\" any later version published by the Free Software Foundation; with no
.\" Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
.\" Texts.  A copy of the license is included in the `COPYING.DOC' file
.\" as part of this distribution.
.\"
.TH gd_strings 3 "25 December 2016" "Version 0.10.0" "GETDATA"

.SH NAME
gd_strings \(em retrieve a list of string values from a Dirfile

.SH SYNOPSIS
.SC
.B #include <getdata.h>
.HP
.BI "const char **gd_strings(DIRFILE *" dirfile );
.HP
.BI "const char **gd_mstrings(DIRFILE *" dirfile ", const char *" parent );
.EC

.SH DESCRIPTION
The
.FN gd_strings
function queries a dirfile(5) database specified by
.ARG dirfile
and compiles a read-only list of values of the all
.B STRING
type fields defined in the database, excluding /META subfields.

The
.FN gd_mstrings
function produces the same list, but for
.B STRING
meta subfields of the indicated
.ARG parent
field.

The 
.ARG dirfile
argument must point to a valid DIRFILE object previously created by a call to
.F3 gd_open .

.SH RETURN VALUE
Upon successful completion,
.FN gd_strings
returns a pointer to an array of strings containing the values of all the
.B STRING
fields defined in the dirfile database.  Similarly,
.FN gd_mstrings
returns a pointer to an array of strings containing the values of all the
.B STRING
metafields under
.ARG parent .

The returned array is terminated by a NULL pointer.  A valid pointer is always
returned if this function does not encounter an error.  If there are no string
values to return, a pointer to an array consisting of only the NULL pointer is
returned.

The array returned will be de-allocated by a call to
.F3 gd_close
and should not be de-allocated by the caller.  The list returned should not be
assumed to be in any particular order, although it is guaranteed to be in the
same order as the list of
.B STRING
fields returned by
.F3 gd_field_list_by_type .
The array is terminated by a NULL pointer.  The number of strings in the array
can be obtained from a call to
.F3 gd_nfields_by_type .

The caller may not modify any strings in the array, or the array itself.  Doing
so may cause database corruption.  The pointer returned is guaranteed to be
valid until
.FN gd_strings
or
.FN gd_mstrings
is called again with the same arguments, or until the array is de-allocated by
a call to
.F3 gd_close
or
.F3 gd_discard .

On error, these functions return NULL and store a negative-valued error code in
the
.B DIRFILE
object which may be retrieved by a subsequent call to
.F3 gd_error .
Possible error codes are:
.DD GD_E_ALLOC
The library was unable to allocate memory.
.DD GD_E_BAD_CODE
.RB ( gd_mstrings ()
only) The supplied parent field code was not found, or referred to a metafield
itself.
.DD GD_E_BAD_DIRFILE
The supplied dirfile was invalid.
.PP
A descriptive error string for the error may be obtained by calling
.F3 gd_error_string .

.SH HISTORY
The
.FN get_strings
function appeared in GetData-0.3.0.

The
.FN get_mstrings
function appeared in GetData-0.4.0.

In GetData-0.7.0, these functions were renamed to
.FN gd_strings
and
.FN gd_mstrings .

.SH SEE ALSO
.F3 gd_error ,
.F3 gd_error_string ,
.F3 gd_field_list_by_type ,
.F3 gd_mstrings ,
.F3 gd_nfields_by_type ,
.F3 gd_open ,
.F3 gd_string ,
dirfile(5)
